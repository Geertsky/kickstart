######## MAIN KICKSTART ########################################################
# The kickstart is made up out of two parts.
# The main part, which is quite minimal, and a dynamic part (/tmp/dynamic.ks)
# that gets written during the %pre script.
# The %pre script starts by parsing some options from the kernel cmdline and
# detecting the RHEL version.
# It fills /tmp/dynamic.ks depending on these variables.
################################################################################

# For packages, partitioning and firewall settings search for "settings"

# Keyboard layouts
keyboard us
# System language
lang en_US.UTF-8
# Shutdown after installation
shutdown
# Use text mode install and CDROM installation media
cmdline
cdrom
reqpart

%include /tmp/dynamic.ks

#########  PRE-SCRIPT #############################################################################
%pre --logfile /tmp/kickstart.install.pre.log --erroronfail
#fedora doesn't have platform-python and rhel8 only has platform-python we'll have to detect what we have...
PYTHON=$(ls /usr/libexec/platform-python /usr/bin/python3 2>/dev/null|head -n1)
cat<<EOT>/tmp/pre-script.py
# !$PYTHON
import re

bootloader = ""
packages = []
part = []
post = ""
users = []
lfkeys = [
  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDaWaDOEGqhZy1XD3a0IJKPvuB0wz2Yzc7Y8b2E91PPDSfi2wczUjZ9T2f8J7fw46i6O8dUFdsle8HePlVt1f6P+SPr84KIvte4sCXPGjHO7UlP+0biPl1FJbe+LU6akGVgAhc37CTn7h10COim5TpIdmPfn8A1y0Y8G3GNTVELSC4GG6rJLgme++OTkNlenH+L7KSobQE1v+MS4mRjrg+qitgPzBv1VgTWJff4d3vdEtb9zwVdzZzyXcdP5/nWH54iDaZawLsyvPXG2VDQq9bUn4CbZ+/ldrVg+yi8Y5RlSLFlbaX2XKnqf8mC3fpszXrmZ93d/idvCLDQ2ijV1FQzYLNg9nstV6VHCek1+g0u3oQ17CyRRCuxSRf3kDagO/+FMGwIliQTSX8rTx0epYzj4vUKA0nYIHXhwklUTG2PFNgJ1Nfxllqblij/PbFfoJCCp+st7/ewYYiclV6jrAg01/bqAvrdS8PW6JQpTIeuJRZhkrvCxgzDsuYE+EqTHxyBs7Uxu9D8QvgZEYiwuClRE92xPNmuEk/BDpX9s8mcXtamp57AUESRFWPFUZoDFuHRjHz56lXJ0UIfDR7XDZHumdQRt6jh7Sj0YGVN3Es9UIqka9dZRiXLdZ9q/C0IReZKtcKDSIn/xB1Kt2qAIRLpSG3IX8JmONOa1h/Gns1NKw==  markus.frei@linuxfabrik.ch",
  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDixdI8HWcP4buCMgc5rIQwG40E2IlDZ2NZVYsnl6Ko5qunzCScRJlONr3T8rnwHHBVg16jXT3yc8Ib01BXarSz88FdAYbm2IDDIvD6Infm7OLx9uJmdX/h3/t063l2I4kbcLsXoDinUqWMHrLNqoXjzb6rPAudb0PQTFj0b/WM6SZio0tWZcATSfI5BMBg212Ni24FRN6Q1ql4p0aYw6w1dfnNFCuHD+3Sfpm8UN+kZZVXX0sw5hNdebLwbSmc+qnktPxklWr6WyW5vtHCP2+puWHEH34yzdoncxCE06Ce2C101EXAk0jSKaorWdy9fhIxJvMSZaQGvBtwINJ/GHFJu6Q63PeMKKNV/pgnVJwukdCG+DNb7UsZ+RlUjP1UvGOO2IvTwtyReKdZNrWeD8PDdWbztbh5TbNfHnOZYQhnPv/NoSLBcrieixyFZ/uujzy+pBrIu8aXZz7feZeOyY0b8dQKoPgBrJhCFccpdQOHdvldBLY8du+SI0qAV7Ch0R3kskRaGwV18KtPwVUfOVF1rMygJVPRrTdsiIAv4m0U33bx/MOmka9PbzgO3eeBiDGqGLQn1Ah/+2vjDJxlbmJa4Syojln240s3frFlUbVHzyyYSA8varu1SwO97BkRZd8ckDltTzpT3WKsmi9vbfho/opQu/L0NgX7+Tfi0EXLEQ==  sandro.lang@linuxfabrik.ch",
  "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDuYw1auj8Lo6l5Ie8H7q419pKNjD3LSDZpFLNI0KehO chris.drescher@linuxfabrik.ch",
  "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM5DxWzuUlSfdHHE1c4oQ2cbC0TyjXkVCuNKBJvn7TvX navid.sassan@linuxfabrik.ch",
  "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBt35STxkHOpjtXSTAF5mbpxROJGPP/Gu8LG1JyH3unn baybars.zuenbuel@linuxfabrik.ch",
  "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDlUb4UApMweLjlbmAadiwjPNwAiZ0i/ucxN9sk50kur geert.geurts@linuxfabrik.ch",
  ]

#==== packages =================
packages = ["@core", "kexec-tools"]
packages_cis = [
    "dhcp-client",
    "tuned",
    "-aic94xx-firmware",
    "-alsa-firmware",
    "-alsa-lib",
    "-alsa-tools-firmware",
    "-biosdevname",
    "-iprutils",
    "-ivtv-firmware",
    "-iwl100-firmware",
    "-iwl1000-firmware",
    "-iwl105-firmware",
    "-iwl135-firmware",
    "-iwl2000-firmware",
    "-iwl2030-firmware",
    "-iwl3160-firmware",
    "-iwl3945-firmware",
    "-iwl4965-firmware",
    "-iwl5000-firmware",
    "-iwl5150-firmware",
    "-iwl6000-firmware",
    "-iwl6000g2a-firmware",
    "-iwl6000g2b-firmware",
    "-iwl6050-firmware",
    "-iwl7260-firmware",
    "-langpacks-*",
    "-langpacks-en",
    "-libertas-sd8686-firmware",
    "-libertas-sd8787-firmware",
    "-libertas-usb8388-firmware",
    "-plymouth",
]

packages_cloud = [
    "dhcp-client",
    "qemu-guest-agent",
    "cloud-init",
    "cloud-utils-growpart",
    "tuned",
    "-aic94xx-firmware",
    "-alsa-firmware",
    "-alsa-lib",
    "-alsa-tools-firmware",
    "-biosdevname",
    "-iprutils",
    "-ivtv-firmware",
    "-iwl100-firmware",
    "-iwl1000-firmware",
    "-iwl105-firmware",
    "-iwl135-firmware",
    "-iwl2000-firmware",
    "-iwl2030-firmware",
    "-iwl3160-firmware",
    "-iwl3945-firmware",
    "-iwl4965-firmware",
    "-iwl5000-firmware",
    "-iwl5150-firmware",
    "-iwl6000-firmware",
    "-iwl6000g2a-firmware",
    "-iwl6000g2b-firmware",
    "-iwl6050-firmware",
    "-iwl7260-firmware",
    "-langpacks-*",
    "-langpacks-en",
    "-libertas-sd8686-firmware",
    "-libertas-sd8787-firmware",
    "-libertas-usb8388-firmware",
    "-plymouth",
]

packages_minimal = []

# ==== /packages ===================

# ==== partitioning ================
part_cis = [
    'logvol /home          --fstype="xfs"  --size=1024   --vgname=rl --name=home          --fsoptions="nodev"',
    'logvol /var/log       --fstype="xfs"  --size=2048   --vgname=rl --name=var_log       --fsoptions="nodev,noexec,nosuid"',
    'logvol /var/log/audit --fstype="xfs"  --size=512    --vgname=rl --name=var_log_audit --fsoptions="nodev,noexec,nosuid"',
    'logvol /var           --fstype="xfs"  --size=4096   --vgname=rl --name=var           --fsoptions="nodev"',
    'logvol /var/tmp       --fstype="xfs"  --size=1024   --vgname=rl --name=var_tmp       --fsoptions="nodev,noexec,nosuid"',
    'logvol /tmp           --fstype="xfs"  --size=1024   --vgname=rl --name=tmp           --fsoptions="nodev,noexec,nosuid"',
    'logvol /              --fstype="xfs"  --size=4096   --vgname=rl --name=root',
    'logvol swap           --fstype="swap" --recommended --vgname=rl --name=swap',
]
part_minimal = [
    'logvol swap --fstype="swap" --recommended     --name=swap --vgname=rl',
    'logvol /    --fstype="xfs" --grow --size=1024 --name=root --vgname=rl',
]

# ==== /partitioning ===============

# ==== users =======================
# due to incompatibility of dict between python3.6(rhel8) and python3.9(rhel9) a user is defined
# as a string containing a : sesperated list of strings of python asignment statements. 
# The asignment statement is in the form <name> = <value> where value is a string.

# == users_cis
users_cis = [
    'name="linuxfabrik":cmd="user --name=linuxfabrik --groups=wheel --password=password --plaintext":keys=' + str(lfkeys),
    'name="root":cmd="rootpw --plaintext --lock password":keys=' + str([None])
]

# == users_cloud
users_cloud = [
    'name="linuxfabrik":cmd="user --name=linuxfabrik --groups=wheel --lock":keys=' + str([None]),
    'name="root":cmd="rootpw --plaintext --lock password":keys=' + str([None])
]

# == users_cloud_cis
users_cloud_cis = [
    'name="linuxfabrik":cmd="user --name=linuxfabrik --groups=wheel --lock":keys=' + str([None]),
    'name="root":cmd="rootpw --plaintext --lock password":keys=' + str([None])
]

# == users_minimal
users_minimal = [
    'name="linuxfabrik":cmd="user --name=linuxfabrik --groups=wheel --password=password --plaintext":keys=' + str([None]),
    'name="root":cmd="rootpw --plaintext --lock password":keys=' + str(lfkeys)
]

# ==== /users ======================

# ==== post scripts ================

# == cloud[-cis] ===

post_cloud_cis = '''
# setup systemd to boot to the right runlevel
echo -n "Setting default runlevel to multiuser text mode"
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target
echo .

# this is installed by default but we don't need it in virt
# Commenting out the following for =1234504
# rpm works just fine for removing this, no idea why dnf can't cope
echo "Removing linux-firmware package."
rpm -e linux-firmware

# Remove firewalld; was supposed to be optional in F18+, but is pulled in
# in install/image building.
echo "Removing firewalld."
# FIXME! clean_requirements_on_remove is the default with DNF, but may
# not work when package was installed by Anaconda instead of command line.
# Also -- check if this is still even needed with new anaconda -- disabled
# firewall should _not_ pull in this package.
# yum -C -y remove "firewalld*" --setopt="clean_requirements_on_remove=1"
dnf --cacheonly -y erase "firewalld*"

# Another one needed at install time but not after that, and it pulls
# in some unneeded deps (like, newt and slang)
echo "Removing authconfig."
dnf --cacheonly -y erase authconfig

dnf --cacheonly -y remove avahi\\*

# these tools always fail to install in the %packages section, so try this here
dnf -y install cloud-init cloud-utils-growpart rng-tools tuned
systemctl enable --now cloud-init
systemctl enable --now cloud-init-local
systemctl enable --now cloud-config
systemctl enable --now cloud-final
systemctl enable --now rngd

echo -n "Getty fixes"
# although we want console output going to the serial console, we don't
# actually have the opportunity to login there. FIX.
# we don't really need to auto-spawn _any_ gettys.
sed -i '/^#NAutoVTs=.*/ a\
NAutoVTs=0' /etc/systemd/logind.conf

echo -n "Network fixes"
# initscripts don't like this file to be missing.
# and https://bugzilla.redhat.com/show_bug.cgi?id=1204612
cat > /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
DEVTIMEOUT=10
EOF

# Anaconda is writing an /etc/resolv.conf from the install environment.
# The system should start out with an empty file, otherwise cloud-init
# will try to use this information and may error:
# https://bugs.launchpad.net/cloud-init/+bug/1670052
truncate -s 0 /etc/resolv.conf

# For cloud images, 'eth0' _is_ the predictable device name, since
# we don't want to be tied to specific virtual (!) hardware
rm -f /etc/udev/rules.d/70*
ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules

# generic localhost names
cat > /etc/hosts << EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

EOF
echo .

# Because memory is scarce resource in most cloud/virt environments,
# and because this impedes forensics, we are differing from the Fedora
# default of having /tmp on tmpfs.
# However, there is no need to disable the mount, as we are already overwriting the options for /tmp above.
# Masking the mount now would lead to a missing /tmp.
# echo "Disabling tmpfs for /tmp."
# systemctl mask tmp.mount

echo "virtual-guest" > /etc/tuned/active_profile

# make sure firstboot doesn't start
echo "RUN_FIRSTBOOT=NO" > /etc/sysconfig/firstboot

# = linuxfabrik cloud user
cat > /etc/sudoers.d/linuxfabrik << EOF
%linuxfabrik ALL=NOPASSWD: ALL
EOF
sed -i 's/name: cloud-user/name: linuxfabrik/g' /etc/cloud/cloud.cfg

echo "Cleaning old dnf repodata."
dnf clean all

# chance dhcp client retry/timeouts to resolve =6866
cat  >> /etc/dhcp/dhclient.conf << EOF

timeout 300;
retry 60;
EOF

# reorder console entries
sed -i 's/console=tty0/console=tty0 console=ttyS0,115200n8/' /boot/grub2/grub.cfg

echo "Removing random-seed so it's not the same in every image."
rm -f /var/lib/systemd/random-seed

rm -rf /var/lib/yum/*
rm -rf /var/log/yum.log
rm -rf /var/tmp/*
find /var/log -type f -exec truncate --size=0 {} \\;
rm -f /root/.wget-hsts
export HISTSIZE=0
cat /dev/null > ~/.bash_history
history -c

echo "Fixing SELinux contexts."
touch /var/log/cron
touch /var/log/boot.log
mkdir -p /var/cache/yum
# ignore return code because UEFI systems with vfat filesystems
# that don't support selinux will give us errors
/usr/sbin/fixfiles -R -a restore || true
'''

# == cis ===

post_cis = '''
# allow password-less sudo
cat > /etc/sudoers.d/linuxfabrik << EOF
%linuxfabrik ALL=NOPASSWD: ALL
EOF
'''

# == minimal ===

post_minimal = '''
cat > /etc/sudoers.d/linuxfabrik << EOF
%linuxfabrik ALL=NOPASSWD: ALL
EOF
'''

# ==== /post scripts ===============

# === /settings == Changing anything after this voids warranty! If any...;p ===============

# === kernel cmdline arguments ==============
cmdline = open('/proc/cmdline').read()
try:
    lftype = re.findall(r'lftype=..*?\b', cmdline)[0].replace('lftype=', '')
except:
    lftype = 'minimal'

try:
    lfdisk = re.findall(r'lfdisk=..*?\b', cmdline)[0].replace('lfdisk=', '')
except:
    lfdisk = 'vda'

# === /kernel cmdline arguments =============

# === discover RHEL version ===============
with open('/etc/redhat-release') as file:
    rhel_version = int(re.findall('[0-9]{1,2}', file.read())[0])
# === /discover RHEL version ==============

# === act on cmdlargs & discovery ===========
if lftype == "cloud":
    bootloader = 'bootloader --location=mbr --boot-drive=' + lfdisk + ' ' + '--append="console=ttyS0,115200n8 no_timer_check net.ifnames=0 slub_debug=P page_poison=1 vsyscall=none"'
    packages += packages_cloud
    part = part_minimal
    post = post_cloud_cis
    users = users_cloud
elif lftype == "cloud-cis":
    bootloader = 'bootloader --location=mbr --boot-drive=' + lfdisk + ' ' + '--append="console=ttyS0,115200n8 no_timer_check net.ifnames=0 audit=1 audit_backlog_limit=8192 slub_debug=P page_poison=1 vsyscall=none"'
    packages += packages_cloud
    part = part_cis
    post = post_cloud_cis
    users = users_cis
elif lftype == "cis":
    bootloader = 'bootloader --location=mbr --boot-drive=' + lfdisk + ' ' + '--append="console=ttyS0,115200n8 no_timer_check net.ifnames=0 audit=1 audit_backlog_limit=8192 slub_debug=P page_poison=1 vsyscall=none"'
    packages += packages_cis
    part = part_cis
    post = post_cis
    users = users_cis
elif lftype == "minimal":
    bootloader = 'bootloader --location=mbr --boot-drive=' + lfdisk + ' ' + '--append="console=ttyS0,115200n8 no_timer_check net.ifnames=0 slub_debug=P page_poison=1 vsyscall=none"'
    packages += packages_minimal
    part = part_minimal
    post = post_minimal
    users = users_minimal

# == RHEL VERSION ===
if rhel_version == 7:
    print(rhel_version)
    try:
        packages.remove("dhcp-client")
    except ValueError:
        pass
elif rhel_version == 8:
    print(rhel_version)
    if 'cloud' in lftype:
        packages.append('rng-tools')
elif rhel_version == 9:
    print(rhel_version)
    if 'cloud' in lftype:
        packages.append('rng-tools')
elif rhel_version > 10:
    print("fedora")
    for p in ["tuned", "cloud-init", "cloud-utils-growpart"]:
        try:
            packages.remove(p)
        except ValueError:
            pass

# === /act on cmdlargs & discovery ===========

# === write dynamic.ks =======================
dynamic = open('/tmp/dynamic.ks', 'w')

dynamic.write("\n# System timezone" + "\n")
dynamic.write("timezone Europe/Zurich --utc" + "\n")

dynamic.write("\n# System users" + "\n")
if rhel_version == 7:
    keypost = open('/usr/share/anaconda/post-scripts/70-install-ssh-keys.ks', 'a')
    keypost.write('%post' + "\n")
else:
    keypost = None
for user in users:
    for X in user.split(':'):
        exec(X)
    dynamic.write(cmd + "\n")
    for key in keys:
        if key:
            if rhel_version == 7:
                if name == "root":
                    keypost.write('mkdir /root/.ssh' + '\n')
                    keypost.write('echo ' + key + '>> /root/.ssh/authorized_keys' + '\n')
                else:
                    keypost.write('mkdir /home/' + name + '/.ssh' + '\n')
                    keypost.write('echo ' + key + '>> /home/' + name + '/.ssh/authorized_keys' + '\n')
            else:
                dynamic.write("sshkey --user=" + name + ' ' + '"' + key + '"' + "\n")
if keypost:
    keypost.write("%end")
    keypost.close()

dynamic.write("\n#Only touch $lfdisk. Is respected by zerombr (confirmed: RHEL8,9)" + "\n")
dynamic.write("ignoredisk --only-use=" + lfdisk + "\n")

dynamic.write("\n# System bootloader configuration" + "\n")
dynamic.write(str(bootloader) + "\n")
dynamic.write("zerombr" + "\n")
dynamic.write("\n# Do not remove any partitions, but initializes a disk (or disks) by creating a default disk label" + "\n")
dynamic.write("clearpart --all --drives=" + lfdisk + " --initlabel --disklabel gpt" + "\n")
dynamic.write("\n# LVM: Volume Group" + "\n")
dynamic.write("volgroup rl --pesize=4096 pv.0" + "\n")
dynamic.write("part pv.0 --fstype=lvmpv --ondisk=" + lfdisk + " --size=1 --grow" + "\n")
dynamic.write("part /boot --fstype=xfs --ondisk=" + lfdisk + " --size=1024 --asprimary" + "\n")
for partition_line in part:
    dynamic.write(partition_line + "\n")

dynamic.write("\n# Network information" + "\n")
dynamic.write("network --bootproto=dhcp --device=link --activate --onboot=on --hostname=localhost.localdomain" + "\n")

dynamic.write("\n# Do not configure the X Window System" + "\n")
dynamic.write("skipx" + "\n")
dynamic.write("\n# System services" + "\n")
dynamic.write('services --disabled="kdump" --enabled="NetworkManager,sshd"' + "\n")

dynamic.write("\n# Disable the Setup Agent on first boot" + "\n")
dynamic.write("firstboot --disable" + "\n")
dynamic.write("\n# State of SELinux on the installed system" + "\n")
dynamic.write("selinux --enforcing" + "\n")
dynamic.write("\n#firewall cmd works with iptables... when firewall then firwalld @post" + "\n")
dynamic.write("firewall --disable" + "\n")

dynamic.write("\n%packages" + "\n")
dynamic.writelines(s + "\n" for s in packages)
dynamic.write("%end" + "\n")

dynamic.write("\n%addon com_redhat_kdump --disable" + "\n")
dynamic.write("%end" + "\n")

dynamic.write("\n%post --erroronfail" + "\n")
dynamic.writelines(post)
dynamic.write("%end" + "\n")
dynamic.write("%post --nochroot" + "\n")
dynamic.write("cp /tmp/dynamic.ks /mnt/sysroot/root/" + "\n")
dynamic.write("cp /usr/share/anaconda/post-scripts/70-install-ssh-keys.ks /mnt/sysroot/root/" + "\n")
dynamic.write("%end" + "\n")
EOT
$PYTHON /tmp/pre-script.py
cp /tmp/dynamic.ks /tmp/dynamic.ks /root/
%end
#########  /PRE-SCRIPT ############################################################################
